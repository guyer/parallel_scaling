from pathlib import Path
import pandas as pd
from matplotlib import pyplot as plt
import matplotlib

configfile: "config/config.yml"

include: "rules/common.smk"
include: "rules/configuration.smk"
include: "rules/aggregate.smk"
include: "rules/clone.smk"
include: "rules/permutations.smk"
include: "rules/solve.smk"
include: "rules/plot.smk"
include: "rules/notebook.smk"
include: "rules/reduce.smk"

report: "report/workflow.rst"

SIMULATIONS = get_simulations(config)

# print(SIMULATIONS)

globbed = glob_wildcards("results/fipy~{rev}/suite~{suite}/{id}/metrics.json")

rule all:
    localrule: True
    input:
        "results/plots/scaling.png",
        "results/plots/speedup.png"

rule plot_scaling:
    localrule: True
    output:
        "results/plots/scaling.png"
    input:
        "results/all.json"
    run:
        matplotlib.use('Agg')

        df = pd.read_json(input[0])

        fig, ax = plt.subplots(figsize=(8,6))
        symbol = {
            "petsc": "xb",
            "no-pysparse": "+r",
            "pysparse": "^C1",
            "scipy": "vg"
        }
        line = {
            "a5f233aa7": "-",
            "371d28468": "--"
        }
        for (suite, fipy_rev), group in df.groupby(["suite", "fipy_rev"]):
            group.plot("tasks", "elapsed / s",
                       style=symbol[suite], linestyle=line[fipy_rev],
                       loglog=True, ax=ax, label=f"{suite}-{fipy_rev}")

        ax.set_ylabel("elapsed / s")
        fig.savefig(output[0])

rule plot_speedup:
    localrule: True
    output:
        "results/plots/speedup.png"
    input:
        "results/all.json"
    run:
        matplotlib.use('Agg')

        df = pd.read_json(input[0])

        fig, ax = plt.subplots(figsize=(8,6))
        symbol = {
            "petsc": "xb",
            "no-pysparse": "+r",
            "pysparse": "^C1",
            "scipy": "vg"
        }
        line = {
            "a5f233aa7": "-",
            "371d28468": "--"
        }
        baseline = df[(df["suite"] == "pysparse")
                      & (df["fipy_rev"] == "371d28468")].iloc[0]["elapsed / s"]
        df["speedup"] = baseline / df["elapsed / s"]
        for (suite, fipy_rev), group in df.groupby(["suite", "fipy_rev"]):
            group.plot("tasks", "speedup",
                       style=symbol[suite], linestyle=line[fipy_rev],
                       loglog=True, ax=ax, label=f"{suite}-{fipy_rev}")

        ax.set_ylabel("speedup / ($t_{PySparse} / t_N$)")
        fig.savefig(output[0])

rule bootstrap:
    input:
        expand("results/fipy~{rev}/suite~{suite}/environment.yml",
               rev=config["fipy_rev"],
               suite=config["suite"])

rule aggregate_all_results:
    output:
        "results/all.json"
    input:
        logs=expand("results/fipy~{rev}/suite~{suite}/{id}/metrics.json",
                    zip,
                    rev=SIMULATIONS["fipy_rev"],
                    suite=SIMULATIONS["suite"],
                    id=SIMULATIONS.index)
    log:
        "logs/aggregate_all_results.log"
    run:
        metrics = SIMULATIONS.apply(load_metrics, axis=1)
        df = pd.concat([SIMULATIONS, metrics], axis=1)
        df.to_json(output[0], date_format="iso")

rule aggregate_glob_results:
    output:
        "results/glob.json"
    input:
        logs=expand("results/fipy~{rev}/suite~{suite}/{id}/metrics.json",
                    zip,
                    rev=globbed.rev,
                    suite=globbed.suite,
                    id=globbed.id)
    log:
        "logs/aggregate_glob_results.log"
    run:
        subset = SIMULATIONS.loc[[int(v) for v in globbed.id]]
        metrics = subset.apply(load_metrics, axis=1)
        df = pd.concat([subset, metrics], axis=1)
        df.to_json(output[0], date_format="iso")

rule plot_permutations_timed:
    output:
        total="results/plots/all_permutations_timed.png",
    input:
        "results/all_permutations_timed.json"
    log:
        "logs/plot_permutations_timed.log"
    run:
        from workflow.scripts.plot_permutations import plot_all

        df = pd.read_json(input[0])
        plot_all(df, output.total, ymin=1e0, ymax=1e4)

rule plot_dendrites:
    output:
        "results/plots/dendrites_{scan}.png"
    input:
        get_scan_simulations
    run:
        plot_metrics(input, output[0])

rule tabulate_dendrites:
    output:
        "results/tables/dendrites_{simulation}.json"
    input:
        simulations=get_scan_simulations
    log:
        "logs/results/tables/dendrites_{simulation}.log"
    run:
        benchmarks = []
        for path in input:
            path = Path(path)
            params = pd.read_json(path.parent / "params.json", typ="series")
            params = pd.DataFrame([params])
            benchmark = "benchmarks" / Path("/".join(path.parts[1:-1])) / "benchmark-dendrite1D.tsv"
            benchmark = pd.read_csv(benchmark, delimiter="\t")
            benchmark = params.join(benchmark)
            benchmarks.append(benchmark)

        benchmarks = pd.concat(benchmarks, ignore_index=True)

        benchmarks.to_json(output[0])
